name: CI/CD with NGINX and Docker
on:
  push:
    branches: [ main ]
env:
  IMAGE_NAME: nginx-app
  IMAGE_TAG: ${{ github.sha }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    - name: 🧠 Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-
    - name: 🐳 Log in to Docker Hub
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
    - name: 📦 Build and Push Docker image
      run: |
        docker buildx create --use || true
        docker buildx build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG \
          --push .
    - name: 🔐 Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
    - name: 🚀 Deploy with Docker on EC2
      run: |
        echo "🔍 Debugging image reference"
        echo "Full image reference: ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG"
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<"EOF"
          set -e
          echo "📦 Pulling latest app image"
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG
          echo "🧹 Stopping and removing old containers"
          docker rm -f nginx-app || true
          docker rm -f nginx-proxy || true
          echo "🚀 Starting the app container"
          docker run -d --name nginx-app \
            -p 5000:5000 \
            ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG
          echo "🚀 Starting the nginx container"
          docker run -d --name nginx-proxy -p 80:80 \
            -v /home/ubuntu/github-action-nginx/nginx/default.conf:/etc/nginx/conf.d/default.conf \
            --link nginx-app:app \
            nginx:alpine
        EOF
