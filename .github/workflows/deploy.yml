name: CI/CD with NGINX and Docker

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: nginx-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3

    - name: üß† Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: üê≥ Log in to Docker Hub
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: üì¶ Build and Push Docker image
      run: |
        export DOCKER_CLI_EXPERIMENTAL=enabled
        docker buildx create --use
        docker buildx build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --no-cache \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG \
          --push .

    - name: üîê Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: üöÄ Deploy with Docker on EC2
      run: |
        echo "üîç Debugging image reference"
        echo "IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME"
        echo "IMAGE_TAG: $IMAGE_TAG"
        echo "Full image reference: ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG"
        
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "üì¶ Pulling latest app image"
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG || { echo 'Image pull failed, please check the image reference'; exit 1; }
          
          echo "üßπ Stopping old containers"
          docker ps -q --filter "name=nginx-app" | xargs -r docker stop | xargs -r docker rm || true
          docker ps -q --filter "name=nginx-proxy" | xargs -r docker stop | xargs -r docker rm || true

          echo "üöÄ Starting the app container"
          docker run -d --name nginx-app ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG

          echo "üöÄ Starting the nginx container"
          docker run -d --name nginx-proxy -p 80:80 -v /home/ubuntu/github-action-nginx/nginx/default.conf:/etc/nginx/conf.d/default.conf --link nginx-app:app nginx:alpine
        EOF
